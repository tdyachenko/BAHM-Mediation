#rhat = rhat_LOY2a_C2 =
#rhat = rhat_LOY1b_C1 =
#rhat = rhat_LOY1b_C2 =
#rhat = rhat_LOY2b_C1 =
#rhat = rhat_LOY2b_C2 =
#rhat = rhat_LOY1a_L1 =
#rhat = rhat_LOY1a_L2 =
#rhat = rhat_LOY2a_L1 =
#rhat = rhat_LOY2a_L2 =
#rhat = rhat_LOY1b_L1 =
#rhat = rhat_LOY1b_L2 =
#rhat = rhat_LOY2b_L1 =
#rhat = rhat_LOY2b_L2 =
FUN_Mediation_LMD_RHat_MS_cov (datafile=filename,seed.index=c(1:max(BestSeed_LMD,BestSeed,16)),burnin=burnin,RhatCutoff=1.5)
str(rhat)
rhat$LMD_mean_Sol1; rhat$LMD_Max_Sol1; rhat$LMD_seedMax_Sol1
rhat$LMD_mean_Sol2; rhat$LMD_Max_Sol2; rhat$LMD_seedMax_Sol2
BestSeeds_BM = c(rhat$LMD_seedMax_Sol1,rhat$LMD_seedMax_Sol2)
str(rhat)
ls()
m_torun=matrix(designM[,8],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
filename = out_LOY1a_C1_BinaryMixtureMS_y1_100K
burnin=500;  LMD_BM=c(rep(0,length(filename)))
for(i in 1:length(filename))
{ LMD_BM[i] = logMargDenNR(filename[[i]]$LL_total[-1:-burnin]) } # picking the best for reporting
BestSeed_LMD = which.max(LMD_BM); max(LMD_BM); mean(LMD_BM); BestSeed_LMD
DICtest = FUN_DIC_mediation(Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
McmcOutput=filename, burnin=burnin,  ModelFlag=2)   # 1 aggregate, 2 BM (with and no covariates
BestSeed = which.min(DICtest); min(DICtest); mean(DICtest); BestSeed
rhat = rhat_LOY1a_C1 =
#rhat = rhat_LOY1a_C2 =
#rhat = rhat_LOY2a_C1 =
#rhat = rhat_LOY2a_C2 =
#rhat = rhat_LOY1b_C1 =
#rhat = rhat_LOY1b_C2 =
#rhat = rhat_LOY2b_C1 =
#rhat = rhat_LOY2b_C2 =
#rhat = rhat_LOY1a_L1 =
#rhat = rhat_LOY1a_L2 =
#rhat = rhat_LOY2a_L1 =
#rhat = rhat_LOY2a_L2 =
#rhat = rhat_LOY1b_L1 =
#rhat = rhat_LOY1b_L2 =
#rhat = rhat_LOY2b_L1 =
#rhat = rhat_LOY2b_L2 =
FUN_Mediation_LMD_RHat_MS_cov (datafile=filename,seed.index=c(1:max(BestSeed_LMD,BestSeed,16)),burnin=burnin,RhatCutoff=1.5)
str(rhat)
rhat$LMD_mean_Sol1; rhat$LMD_Max_Sol1; rhat$LMD_seedMax_Sol1
rhat$LMD_mean_Sol2; rhat$LMD_Max_Sol2; rhat$LMD_seedMax_Sol2
BestSeeds_BM = c(rhat$LMD_seedMax_Sol1,rhat$LMD_seedMax_Sol2)
m_torun=matrix(designM[,9],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
filename = out_LOY1a_C2_BinaryMixtureMS_y1_100K
burnin=500;  LMD_BM=c(rep(0,length(filename)))
for(i in 1:length(filename))
{ LMD_BM[i] = logMargDenNR(filename[[i]]$LL_total[-1:-burnin]) } # picking the best for reporting
BestSeed_LMD = which.max(LMD_BM); max(LMD_BM); mean(LMD_BM); BestSeed_LMD
DICtest = FUN_DIC_mediation(Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
McmcOutput=filename, burnin=burnin,  ModelFlag=2)   # 1 aggregate, 2 BM (with and no covariates
BestSeed = which.min(DICtest); min(DICtest); mean(DICtest); BestSeed
rhat = rhat_LOY1a_C2 =
#rhat = rhat_LOY2a_C1 =
#rhat = rhat_LOY2a_C2 =
#rhat = rhat_LOY1b_C1 =
#rhat = rhat_LOY1b_C2 =
#rhat = rhat_LOY2b_C1 =
#rhat = rhat_LOY2b_C2 =
#rhat = rhat_LOY1a_L1 =
#rhat = rhat_LOY1a_L2 =
#rhat = rhat_LOY2a_L1 =
#rhat = rhat_LOY2a_L2 =
#rhat = rhat_LOY1b_L1 =
#rhat = rhat_LOY1b_L2 =
#rhat = rhat_LOY2b_L1 =
#rhat = rhat_LOY2b_L2 =
FUN_Mediation_LMD_RHat_MS_cov (datafile=filename,seed.index=c(1:max(BestSeed_LMD,BestSeed,16)),burnin=burnin,RhatCutoff=1.5)
str(rhat)
rhat$LMD_mean_Sol1; rhat$LMD_Max_Sol1; rhat$LMD_seedMax_Sol1
rhat$LMD_mean_Sol2; rhat$LMD_Max_Sol2; rhat$LMD_seedMax_Sol2
BestSeeds_BM = c(rhat$LMD_seedMax_Sol1,rhat$LMD_seedMax_Sol2)
m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
filename = out_LOY1a_L1_BinaryMixtureMS_y1_100K
burnin=500;  LMD_BM=c(rep(0,length(filename)))
for(i in 1:length(filename))
{ LMD_BM[i] = logMargDenNR(filename[[i]]$LL_total[-1:-burnin]) } # picking the best for reporting
BestSeed_LMD = which.max(LMD_BM); max(LMD_BM); mean(LMD_BM); BestSeed_LMD
DICtest = FUN_DIC_mediation(Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
McmcOutput=filename, burnin=burnin,  ModelFlag=2)   # 1 aggregate, 2 BM (with and no covariates
BestSeed = which.min(DICtest); min(DICtest); mean(DICtest); BestSeed
rhat = rhat_LOY1a_L1 =
#rhat = rhat_LOY1a_L2 =
#rhat = rhat_LOY2a_L1 =
#rhat = rhat_LOY2a_L2 =
#rhat = rhat_LOY1b_L1 =
#rhat = rhat_LOY1b_L2 =
#rhat = rhat_LOY2b_L1 =
#rhat = rhat_LOY2b_L2 =
FUN_Mediation_LMD_RHat_MS_cov (datafile=filename,seed.index=c(1:max(BestSeed_LMD,BestSeed,16)),burnin=burnin,RhatCutoff=1.5)
str(rhat)
rhat$LMD_mean_Sol1; rhat$LMD_Max_Sol1; rhat$LMD_seedMax_Sol1
rhat$LMD_mean_Sol2; rhat$LMD_Max_Sol2; rhat$LMD_seedMax_Sol2
BestSeeds_BM = c(rhat$LMD_seedMax_Sol1,rhat$LMD_seedMax_Sol2)
.
m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
filename = out_LOY1a_L2_BinaryMixtureMS_y1_100K
burnin=500;  LMD_BM=c(rep(0,length(filename)))
for(i in 1:length(filename))
{ LMD_BM[i] = logMargDenNR(filename[[i]]$LL_total[-1:-burnin]) } # picking the best for reporting
BestSeed_LMD = which.max(LMD_BM); max(LMD_BM); mean(LMD_BM); BestSeed_LMD
DICtest = FUN_DIC_mediation(Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
McmcOutput=filename, burnin=burnin,  ModelFlag=2)   # 1 aggregate, 2 BM (with and no covariates
BestSeed = which.min(DICtest); min(DICtest); mean(DICtest); BestSeed
rhat = rhat_LOY1a_L2 =
#rhat = rhat_LOY2a_L1 =
#rhat = rhat_LOY2a_L2 =
#rhat = rhat_LOY1b_L1 =
#rhat = rhat_LOY1b_L2 =
#rhat = rhat_LOY2b_L1 =
#rhat = rhat_LOY2b_L2 =
FUN_Mediation_LMD_RHat_MS_cov (datafile=filename,seed.index=c(1:max(BestSeed_LMD,BestSeed,16)),burnin=burnin,RhatCutoff=1.5)
str(rhat)
rhat$LMD_mean_Sol1; rhat$LMD_Max_Sol1; rhat$LMD_seedMax_Sol1
rhat$LMD_mean_Sol2; rhat$LMD_Max_Sol2; rhat$LMD_seedMax_Sol2
BestSeeds_BM = c(rhat$LMD_seedMax_Sol1,rhat$LMD_seedMax_Sol2)
ls()
save.image("D:/Dropbox/Mediation/Data analysis/Loyalty/Loyalty singV out 2021-07.RData")
m_torun=matrix(designM[,8],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY1b_C1_BinaryMixtureMS_y1_100K = (
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,9],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY1b_C2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,8],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_C1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,9],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_C2_BinaryMixtureMS_y2_100K = (
#----- Luck -----------------
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L2_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,8],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY2b_C1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,9],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_C2_BinaryMixtureMS_y2_100K = (
#----- Luck -----------------
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L2_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,9],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY2b_C2_BinaryMixtureMS_y2_100K = (
#----- Luck -----------------
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY1a_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,1:2]; nvarX=ncol(X_torun)
#  filename = out_LOY2a_L2_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
ls()
seed.index
save.image("D:/Dropbox/Mediation/Data analysis/Loyalty/Loyalty singV out 2021-07.RData")
m_torun=matrix(designM[,6],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY1b_L1_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY1b_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,7],ncol=1); y_torun=y1; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY1b_L2_BinaryMixtureMS_y1_100K = (
#m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,6],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY2b_L1_BinaryMixtureMS_y2_100K = (
#m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
#  filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
m_torun=matrix(designM[,7],ncol=1); y_torun=y2; X_torun=designX[,c(1,3)]; nvarX=ncol(X_torun)
filename = out_LOY2b_L2_BinaryMixtureMS_y2_100K = (
#foreach(i=1:length(seed.index), .combine=c) %dopar%  # parallel
foreach(i=1:length(seed.index)) %dopar%  # parallel, no .combine as I want a list, not a table or vector
{ out  =  FUN_Mediation_LCRM_2class_MS_Gibbs_Moderated_forShinyApp ( Model = 2,  # 1 aggregate, 2 BM (with and no covariates)
Data = list(X=X_torun,y=y_torun,m=m_torun,Z=Z),
Prior=list(ma = c(rep(0, nvarX)), mgb = c(rep(0, nvarX+nvarM)),ml = c(rep(0, nvarZ)),
Aa = 0.01 * diag(nvarX), Agb = 0.01 * diag(nvarX+nvarM), Al = 0.01 * diag(nvarZ),
nu=5, g=5, qy= c(var(y_torun),var(y_torun)),  qm= c(var(m_torun),var(m_torun))),
Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.5,slambda2=0.5))  # lambda is irrelevant here with no moderators
#Mcmc=list(Rep=100000,keep=100,seed=seed.list[i],slambda1=0.2,slambda2=0.1))  # with covariates setting
out
}
)
max(filename[[1]]$reject)
save.image("D:/Dropbox/Mediation/Data analysis/Loyalty/Loyalty singV out 2021-07.RData")
ls()
data = as.matrix(read.csv("G:/Dropbox/Mediation/Data analysis/Summary of pubStudies CSV for R.csv",header = TRUE))
data = as.matrix(read.csv("D:/Dropbox/Mediation/Data analysis/Summary of pubStudies CSV for R.csv",header = TRUE))
indexIndiv = which(data[,22]==0)
length(indexIndiv)
sum(data[indexIndiv,4])
windows()
hist(data[indexIndiv,9],breaks=75,xlim=c(-5,150),main="",xlab=expression(log[10] ~ BF),col="grey")
abline(v=2,col="red",lwd=4,lty=2)
windows()
hist(data[,9],breaks=75,xlim=c(-5,150),main="",xlab=expression(log[10] ~ Bayes ~ Factor),col="grey")
abline(v=2,col="red",lwd=4,lty=2)
windows()
hist(data[indexIndiv,9],breaks=75,xlim=c(-5,150),main="",xlab=expression(log[10] ~ BF),col="grey")
#abline(v=2,col="red",lwd=4,lty=2)
windows()
hist(data[,9],breaks=75,xlim=c(-5,150),main="",xlab=expression(log[10] ~ Bayes ~ Factor),col="grey")
windows()
hist(data[indexIndiv,9],breaks=50,xlim=c(-5,150),main="",xlab=expression(log[10] ~ BF),col="grey")
load(("D:/Dropbox/Mediation/Data analysis/Loyalty/Loyalty singV out 2020-11.RData"))
library('HDInterval')
#filename= out_LOY1a_BinaryMixtureMS_y1_100K[[2]]  #
filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZ[[7]]  #
#filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZvar[[3]]  #
burnin=500
CIband=0.95
tempCIs = rbind(
t(apply(filename$alphadraw[-1:-burnin,,1],2,hdi,credMass = CIband)),                        # aM
t(apply(filename$betaMdraw[-1:-burnin,],2,hdi,credMass =CIband)),                          # bM
t(apply(filename$alphadraw[-1:-burnin,,2],2,hdi,credMass = CIband)),                        # aS
t(apply(filename$gammabetaSdraw[-1:-burnin,],2,hdi,credMass = CIband)),                     # gbS
#t(apply(filename$lambdadraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # Lambdas
t(hdi(filename$lambdadraw[-1:-burnin,1],credMass =CIband)),                        # Lambdas
t(apply(filename$sigma2mdraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # sm
t(apply(filename$sigma2ydraw[-1:-burnin,],2,hdi,credMass = CIband))                        # sy
)
tempMeans = c(
colMeans(filename$alphadraw[-1:-burnin,,1]),                        # aM
colMeans(filename$betaMdraw[-1:-burnin,]),                          # bM
colMeans(filename$alphadraw[-1:-burnin,,2]),                        # aS
colMeans(filename$gammabetaSdraw[-1:-burnin,]),                     # gbS
mean(filename$lambdadraw[-1:-burnin,1]),                        # Lambdas
#colMeans(filename$lambdadraw[-1:-burnin,]),                        # Lambdas
colMeans(filename$sigma2mdraw[-1:-burnin,]),                        # sm
colMeans(filename$sigma2ydraw[-1:-burnin,])                        # sy
)
temp = cbind(tempMeans,tempCIs)
rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","luck1","luck2","control1","control2","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","gender","age","smM","smS","syM","syS")
temp
ls()
library('HDInterval')
filename= out_LOY1a_BinaryMixtureMS_y1_100K[[2]]  #
#filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZ[[7]]  #
#filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZvar[[3]]  #
burnin=500
CIband=0.95
tempCIs = rbind(
t(apply(filename$alphadraw[-1:-burnin,,1],2,hdi,credMass = CIband)),                        # aM
t(apply(filename$betaMdraw[-1:-burnin,],2,hdi,credMass =CIband)),                          # bM
t(apply(filename$alphadraw[-1:-burnin,,2],2,hdi,credMass = CIband)),                        # aS
t(apply(filename$gammabetaSdraw[-1:-burnin,],2,hdi,credMass = CIband)),                     # gbS
#t(apply(filename$lambdadraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # Lambdas
t(hdi(filename$lambdadraw[-1:-burnin,1],credMass =CIband)),                        # Lambdas
t(apply(filename$sigma2mdraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # sm
t(apply(filename$sigma2ydraw[-1:-burnin,],2,hdi,credMass = CIband))                        # sy
)
tempMeans = c(
colMeans(filename$alphadraw[-1:-burnin,,1]),                        # aM
colMeans(filename$betaMdraw[-1:-burnin,]),                          # bM
colMeans(filename$alphadraw[-1:-burnin,,2]),                        # aS
colMeans(filename$gammabetaSdraw[-1:-burnin,]),                     # gbS
mean(filename$lambdadraw[-1:-burnin,1]),                        # Lambdas
#colMeans(filename$lambdadraw[-1:-burnin,]),                        # Lambdas
colMeans(filename$sigma2mdraw[-1:-burnin,]),                        # sm
colMeans(filename$sigma2ydraw[-1:-burnin,])                        # sy
)
temp = cbind(tempMeans,tempCIs)
rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","luck1","luck2","control1","control2","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","gender","age","smM","smS","syM","syS")
temp
library('HDInterval')
filename= out_LOY1a_BinaryMixtureMS_y1_100K[[2]]  #
#filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZ[[7]]  #
#filename= out_LOY1a_BinaryMixtureMS_y1_100K_withZvar[[3]]  #
burnin=200
CIband=0.95
tempCIs = rbind(
t(apply(filename$alphadraw[-1:-burnin,,1],2,hdi,credMass = CIband)),                        # aM
t(apply(filename$betaMdraw[-1:-burnin,],2,hdi,credMass =CIband)),                          # bM
t(apply(filename$alphadraw[-1:-burnin,,2],2,hdi,credMass = CIband)),                        # aS
t(apply(filename$gammabetaSdraw[-1:-burnin,],2,hdi,credMass = CIband)),                     # gbS
#t(apply(filename$lambdadraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # Lambdas
t(hdi(filename$lambdadraw[-1:-burnin,1],credMass =CIband)),                        # Lambdas
t(apply(filename$sigma2mdraw[-1:-burnin,],2,hdi,credMass = CIband)),                        # sm
t(apply(filename$sigma2ydraw[-1:-burnin,],2,hdi,credMass = CIband))                        # sy
)
tempMeans = c(
colMeans(filename$alphadraw[-1:-burnin,,1]),                        # aM
colMeans(filename$betaMdraw[-1:-burnin,]),                          # bM
colMeans(filename$alphadraw[-1:-burnin,,2]),                        # aS
colMeans(filename$gammabetaSdraw[-1:-burnin,]),                     # gbS
mean(filename$lambdadraw[-1:-burnin,1]),                        # Lambdas
#colMeans(filename$lambdadraw[-1:-burnin,]),                        # Lambdas
colMeans(filename$sigma2mdraw[-1:-burnin,]),                        # sm
colMeans(filename$sigma2ydraw[-1:-burnin,])                        # sy
)
temp = cbind(tempMeans,tempCIs)
rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","luck1","luck2","control1","control2","smM","smS","syM","syS")
#rownames(temp) = c("aM0","aM1","bM0","bM1","aS0","aS1","gbS0","gS1","bS2","Lambda1","gender","age","smM","smS","syM","syS")
temp
filename = out_LOY1a_BinaryMixtureMS_y1_100K[[2]]
burnin=200
alphabeta_M = cbind(filename$alphadraw[-1:-burnin,2,1],filename$betaMdraw[-1:-burnin,2])
pp_M=pn_M=nn_M=np_M=0
for(r in 1:(1000-burnin))
{ pp_M = pp_M + ifelse(alphabeta_M[r,1]>0,ifelse(alphabeta_M[r,2]>0,1,0),0)
pn_M = pn_M + ifelse(alphabeta_M[r,1]>0,ifelse(alphabeta_M[r,2]<0,1,0),0)
np_M = np_M + ifelse(alphabeta_M[r,1]<0,ifelse(alphabeta_M[r,2]>0,1,0),0)
nn_M = nn_M + ifelse(alphabeta_M[r,1]<0,ifelse(alphabeta_M[r,2]<0,1,0),0)
}
windows(); par(mfrow=c(1,1))
plot(alphabeta_M, xlab=expression(alpha["E,M"]),ylab=expression(beta[M]), xlim=c(-0.3,2.2),ylim=c(-0.2,0.8),pch=20)
abline(h=0,v=0,col="gray")
text(2.1, 0.8,paste(round(100*pp_M/(1000-burnin),2),"%"),cex = .75,font=2)
text(2.1, -0.2,paste(round(100*pn_M/(1000-burnin),2),"%"),cex = .75)
text(-0.2, 0.8,paste(round(100*np_M/(1000-burnin),2),"%"),cex = .75)
text(-0.2, -0.2,paste(round(100*nn_M/(1000-burnin),2),"%"),cex = .75)
filename = out_LOY1a_BinaryMixtureMS_y1_100K[[2]]
burnin=500
alphabeta_M = cbind(filename$alphadraw[-1:-burnin,2,1],filename$betaMdraw[-1:-burnin,2])
pp_M=pn_M=nn_M=np_M=0
for(r in 1:(1000-burnin))
{ pp_M = pp_M + ifelse(alphabeta_M[r,1]>0,ifelse(alphabeta_M[r,2]>0,1,0),0)
pn_M = pn_M + ifelse(alphabeta_M[r,1]>0,ifelse(alphabeta_M[r,2]<0,1,0),0)
np_M = np_M + ifelse(alphabeta_M[r,1]<0,ifelse(alphabeta_M[r,2]>0,1,0),0)
nn_M = nn_M + ifelse(alphabeta_M[r,1]<0,ifelse(alphabeta_M[r,2]<0,1,0),0)
}
windows(); par(mfrow=c(1,1))
plot(alphabeta_M, xlab=expression(alpha["E,M"]),ylab=expression(beta[M]), xlim=c(-0.3,2.2),ylim=c(-0.2,0.8),pch=20)
abline(h=0,v=0,col="gray")
text(2.1, 0.8,paste(round(100*pp_M/(1000-burnin),2),"%"),cex = .75,font=2)
text(2.1, -0.2,paste(round(100*pn_M/(1000-burnin),2),"%"),cex = .75)
text(-0.2, 0.8,paste(round(100*np_M/(1000-burnin),2),"%"),cex = .75)
text(-0.2, -0.2,paste(round(100*nn_M/(1000-burnin),2),"%"),cex = .75)
setwd("D:/Dropbox/Mediation/Shiny APP dev/R code/Shiny Code/Mediation Round2/Mediation-app-2021/v20 20210525")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
rownames_list_M = c(rep(0,nrow(tempCIs_M)))
runApp()
ls()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
load("D:/Dropbox/Mediation/Shiny APP dev/R code/Shiny Code/Mediation Round2/Mediation-app-2021/v20 20210525/test.RData")
load("D:/Dropbox/Mediation/Shiny APP dev/R code/Shiny Code/Mediation Round2/Mediation-app-2021/v20 20210525/test.RData")
ls()
str(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mcmc.list
install.packages("mcmc")
runApp()
FUN_Mediation_LMD_RHat_MS_cov
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
